package com.pingwit.part_27;

@SuppressWarnings("SpellCheckingInspection")
public class MavenTheory {
    public static void main(String[] args) {
        /*
        Maven - это инструмент для управления проектами в Java.
        Он предоставляет средства для автоматизации сборки проекта, управления зависимостями,
        выполнения тестов и других задач, связанных с разработкой программного обеспечения на Java.

        Альтернатива Maven - это Gradle
         */


        /*
        Основные функции Maven:
        - Управление зависимостями: Maven позволяет управлять зависимостями проекта,
         автоматически загружая необходимые библиотеки из центрального репозитория Maven или других удаленных репозиториев.

        - Стандартизированная структура проекта: Maven определяет структуру проекта,
         что облегчает сопровождение кода и совместную разработку.

        - Автоматическая сборка: Maven автоматически собирает проекты,
        используя заданные конфигурационные файлы (pom.xml) и собирая их в исполняемые артефакты, такие как JAR или WAR файлы.

        - Управление жизненным циклом сборки: Maven предоставляет набор стандартных фаз сборки,
         таких как compile, test, package и другие, которые позволяют разработчикам определить, какие действия выполнять на различных этапах разработки.
         */


        /*
        Файл pom.xml (Project Object Model) является основной конфигурационной файлом Maven.
        Он содержит информацию о проекте и его зависимостях, а также инструкции о том, как Maven должен собирать проект.

        В файле pom.xml вы можете найти следующую информацию:

        - Координаты проекта: Это включает в себя groupId (идентификатор группы),
         artifactId (идентификатор артефакта) и version (версия проекта). Эти параметры определяют уникальность и версионность вашего проекта в Maven-репозитории.

        - Зависимости: Список внешних библиотек (зависимостей), которые ваш проект использует.
        Maven автоматически загружает эти зависимости из центрального репозитория или других удаленных репозиториев.

        - Сборка проекта: Это определяет, как Maven должен собирать проект.
        Вы можете настроить различные этапы сборки, такие как компиляция и упаковка, а также настройки тестирования и т.д.

        - Плагины: Maven использует плагины для выполнения различных задач в процессе сборки проекта.
        В файле pom.xml вы можете указать, какие плагины должны использоваться и какие цели (goals) они должны выполнить.
         */


        /*
        Вот некоторые из наиболее распространенных типов упаковки (packaging) в Maven:

        - jar (Java ARchive): Это стандартный тип упаковки для проектов на языке Java.
        JAR-файлы содержат скомпилированный байт-код Java, ресурсы и мета-информацию о проекте.
        Они используются для распространения и запуска библиотек и автономных приложений.

        - war (Web ARchive): Этот тип упаковки используется для создания веб-приложений в Java.
        WAR-файлы содержат скомпилированный код, ресурсы, конфигурационные файлы и библиотеки,
        необходимые для развертывания приложения на веб-сервере. WAR-файлы могут содержать сервлеты, JSP-страницы,
         HTML, CSS, JavaScript и другие веб-ресурсы.

        - ear (Enterprise ARchive): Этот тип упаковки используется для создания приложений
         в рамках платформы Java Enterprise Edition (Java EE). EAR-файлы содержат одно или несколько вложенных модулей,
          таких как WAR, JAR, EJB (Enterprise JavaBeans) и ресурсы, необходимые для развертывания приложения в среде Java EE.

        - pom (Project Object Model): Этот тип упаковки используется для родительских проектов,
         которые не создают собственные артефакты, но определяют общие настройки для дочерних проектов.
          Файл pom.xml в таких проектах служит как конфигурационный файл для Maven и не генерирует никаких выходных файлов.
         */
    }
}
