//////////////////////////
/////// Lecture 1  ///////
//////////////////////////

Установка Java, примитивные типы данных, операторы в Java

1. Рассказать про запись занятий, помощь друг другу, все вопросы в общий чат, домашка и дедлайны
2. Введение в Java - кроссплатформенность, JVM, byte code
3. Настройка Intellij Idea, Path Variable
4. Запуск и компиляция программы в текстовом редакторе, HelloWorld внутри Intellij Idea
5. Типы данных (byte, short, char, int, long, float, double, boolean, String)
6. Операторы в джава. +, -, /, *, %, >, <, !=, >>, <<, x++/ ++x, x--/ --x, оператор+=, приоритет операций


Полезный сайт по java:
https://metanit.com/java/tutorial/

Комьюнити сайт:
https://stackoverflow.com/

Intellij Idea:
https://www.jetbrains.com/ru-ru/idea/download/#section=windows

Скачать 17 JDK: https://jdk.java.net/archive/
Apple M1: Mac/AArch64
Apple Intel: Mac/x64


//////////////////////////
/////// Lecture 2  ///////
//////////////////////////

1. Приведение типов
2. Что такое git. Git commit, fetch+merge, pull, push, git stash, git pop
3. Форматирование кода
4. Рассказать про процесс проверки домашнего задания

Git:
git for Windows: https://git-scm.com/download/win
git for mac: https://git-scm.com/download/mac


//////////////////////////
/////// Lecture 3  ///////
//////////////////////////

1. if-else, if-else-if
2. Ternary (Elvis)
3. Switch / Switch Java 17
4. Цикл for


//////////////////////////
/////// Lecture 4  ///////
//////////////////////////

1. while, do-while
2. continue, break, return
3. Class Scanner


//////////////////////////
/////// Lecture 5  /////// part_6
//////////////////////////

1. Массивы, инициализация, доступ к элементу, двумерные массивы
2. for-each, печать через Arrays.toString()
3. Сложность алгоритма
4. Сортировка пузырьком - O(n²) in the average
5. BinarySearch

Мы раньше с вами рассматривали только переменные, которые могут содержать в себе одно значение, например, строку, число или boolean.
Массив, это структура данных, которая позволяет нам хранить нескольBinarySearchExampleко значений одного типа

Зачем?
- создать несколько переменных и показать, что это неудобно
- показать excel, как пример массива
- рассказать что элементы находятся один за одним, поэтому есть доступ по индексу


Временная сложность алгоритма (в худшем случае) — это функция от размера входных данных,
равная максимальному количеству элементарных операций, проделываемых алгоритмом для решения
экземпляра задачи указанного размера.

Тогда было предложено измерять сложность алгоритмов в элементарных шагах - то,
сколько действий необходимо совершить для его выполнения.
Любой алгоритм включает в себя определённое количество шагов и неважно
на каком устройстве он будет запущен, количество шагов останется неизменным.
Эту идею принято представлять в виде Big O (или О-нотации).

Big O показывает то, как сложность алгоритма растёт с увеличением входных данных.
При этом она всегда показывает худший вариант развития событий - верхнюю границу.


//////////////////////////
/////// Lecture 6  /////// part_7
//////////////////////////

1. Понятие класса, объекта, конструктора, this для конструктора
2. Инициализация полей (примитивы, объекты, static поля)
3. Блоки инициализации (static / nonstatic)
4. toString()


//////////////////////////
/////// Lecture 7  /////// part_8
//////////////////////////

1. Методы класса - static / nonstatic
2. Модификаторы доступа, getters/setters
3. Порядок расположения полей, конструкторов и методов в классе

1. Давайте поговорим про статические и нестатические методы.
getters/setters - это нестатические методы, т.е. мы можем их использовать только при создании экземпляра класса.
Статические методы, это методы, которые относятся непосредствено к класса и могут быть использованы без создания экземпляра

2. Здравствуйте господа, продолжаем с вами погружаться в мир Java и сейчас поговорим с вами про модификаторы доступа.
Во-первых что это такое - это ключевые слова, которые регулируют уровень доступа к элементам нашего кода.


//////////////////////////
/////// Lecture 8  /////// part_9
//////////////////////////

1. Equals, hashcode
2. Records - Java 17
3. Enum: switch, values, valueOf
4. Immutable, показать на примере Immutable array и класса String


//////////////////////////
/////// Lecture 9  /////// part_10
//////////////////////////

1. Понятие интерфейса, абстрактные методы, default методы, static методы, поля в интерфейсах
2. Понятие абстрактного класса. Абстрактные методы, переопределение методов
3. final в переменных, полях, методах, классах
4. Абстрактные методы в enum

1. А сегодня интерфейсы.
Это слово вы наверняка уже не раз слышали. Например, интерфейсы есть у большинства компьютерных программ и игр.
В широком смысле интерфейс — некий «пульт», который связывает две взаимодействующие друг с другом стороны.

Простой пример интерфейса из повседневной жизни - автомобиль.
Вы сидите за рулем, слушаете музыку, переключаете передачи, нажимаете газ и тормоз - все это для вас интерфейс.
Вы не задумываетесь как работает руль, что происходит внутри автомобиля для переключения передачи или
как обработать радио частоты чтобы у вас играла музыка.

Теперь давайте создадим интерфейс и посмотрим как это работает на практике.

2. Абстрактный класс в Java — это класс, который не может быть использован для создания объектов.
Звучит как что-то бесполезное? Но именно в этом и кроется его смысл.
Вместо создания объектов абстрактный класс служит как базовый элемент для других классов.

//////////////////////////
/////// Lecture 10 /////// part_11
//////////////////////////

1. Рекурсия
OPTIONAL
2. Быстрая сортировка (quick sort) - O(n log n)

Quick sort:
https://java-master.com/алгоритм-быстрой-сортировки-quick-sort-в-java/
https://www.baeldung.com/java-quicksort


//////////////////////////
/////// Lecture 11 /////// part_12
//////////////////////////

1. Рефлексия (доступ к приватным полям, конструкторам, изменение final полей, изменение final+static полей, вызов приватного метода)
2. instanceof

Info:
- static final поле нельзя изменить даже рекурсией
- https://www.baeldung.com/java-set-private-field-value
- getDeclaredConstructors (when you want all the constructors)
- getConstructors (when you want only public constructors)

////////////////////////// todo: Где посмотреть в visual VM stack память?
/////// Lecture 12 /////// part_13
//////////////////////////

1. Принципы ООП: абстракция, инкапсуляция, наследование, полиморфизм
2. JVM memory
3. StrongReference, SoftReference, WeakReference
4. Garbage collector (finalize)

Info:
JVM Memory: https://habr.com/ru/post/549176/

java -Xms256m -Xmx2048m
-Xms512m -Xmx2048m
-Xmx1024k
-Xmx512m
-Xmx8g

From Java 7 onwards, the Java String Pool is stored in the Heap space, which is garbage collected by the JVM

WeakReference - скорее всего, не сохранится после следующего процесса сборки мусора.
Слабая ссылка создается следующим образом:
WeakReference<StringBuilder> reference = new WeakReference<>(new StringBuilder());

SoftReference - эти типы ссылок используются для более чувствительных к памяти сценариев,
поскольку они будут собираться сборщиком мусора только тогда, когда вашему приложению не хватает памяти.
SoftReference<StringBuilder> reference = new SoftReference<>(new StringBuilder());

PhantomReference - используется для планирования посмертных действий по очистке,
поскольку мы точно знаем, что объекты больше не живы. Используется только с очередью ссылок,
поскольку .get() метод таких ссылок всегда будет возвращать null.
Эти типы ссылок считаются предпочтительными для финализаторов.

//////////////////////////
/////// Lecture 13 /////// part_14
//////////////////////////

0. String - intern, strip, stringLeading, stripTrailing, repeat, equals, equalsIgnoreCase, toLowerCase, toUpperCase, replace
1. Многострочные строки
2. StringBuilder
3. StringBuffer

//////////////////////////
/////// Lecture 15 /////// part_15
//////////////////////////

1. Иерархия исключений (Throwable, Exception, Error, Runtime, Checked, Unchecked)
2. try-catch-finally
3. Переменные за пределами блока try-catch-finally
4. throw, throws (исключения в интерфейсах и наследниках)
5. Finally System.exit
6. Собственные исключения
7. Выполнение кода при исключениях (debug)

//////////////////////////
/////// Lecture 14 /////// part_16
//////////////////////////

1. Аннотации - при помощи рефлексии сделать валидацию полей класса
- @Override, @Deprecated, @SuppressWarnings
- Поля внутри аннотации

//////////////////////////
/////// Lecture 16 ///////  part_17
//////////////////////////

1. Работа с датами и временем:
 - Date API (LocalDate / LocalDateTime)
 - parse, DateTimeFormatter
2. ZonedDateTime
3. Between

Info:
https://www.baeldung.com/java-datetimeformatter

//////////////////////////
/////// Lecture 16 /////// part_18
//////////////////////////

1. Потоки ввода-вывода
2. Чтение и запись файлов. FileInputStream
- Путь к файлу хард кодом (/ в начале пути указывает на абсолютный путь, а не относительный)
- Закрытие потоков (через finally, через try-with-resources)
3. FileOutputStream
4. Классы ByteArrayInputStream и ByteArrayOutputStream
5. Буферизованные потоки BufferedInputStream и BufferedOutputStream
6. Классы DataOutputStream и DataInputStream
7. Чтение и запись текстовых файлов (FileReader, FileWriter)


//////////////////////////
/////// Part 19    ///////
//////////////////////////

1. Сериализация (ObjectInputStream, ObjectOutputStream, transient)
2. Класс File. Работа с файлами и каталогами.
3. Files.readString(), Files.writeString()
4. RandomAccessFile
5. Работа с ZIP-архивами, почитать из эксель файла

4. Apache POI (optional)- чтение из Word документа

point_3
Мы с вами неплохо поработали с классами из пакета java.io.
Но еще существует и java.nio и даже nio2,

//////////////////////////
/////// Lecture 18 ///////
//////////////////////////

1. Generics
2. Generics в полях класса
3. Generics в конструкторах
4. Generics в методах
5. Generics в наследовании (классы, интерфейсы)

Info:
1. https://metanit.com/java/tutorial/3.11.php
2. https://habr.com/ru/post/207360/
3. https://habr.com/ru/company/sberbank/blog/416413/